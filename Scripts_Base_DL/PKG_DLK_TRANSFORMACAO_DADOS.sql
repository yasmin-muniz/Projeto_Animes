--------------------------------------------------------
--  Arquivo criado - Quarta-feira-Julho-17-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Package DLK_TRANSFORMACAO_DADOS
--------------------------------------------------------
CREATE OR REPLACE EDITIONABLE PACKAGE "DLK_ANIMES"."DLK_TRANSFORMACAO_DADOS" AS

PROCEDURE P_MAIN;  

END DLK_TRANSFORMACAO_DADOS;

/

CREATE OR REPLACE PACKAGE BODY  "DLK_ANIMES"."DLK_TRANSFORMACAO_DADOS" AS 


PROCEDURE LIMPA_DADOS_DUPLICADOS IS

BEGIN

DELETE FROM DLK_ANIMES
WHERE ROWID IN (
    SELECT ROWID
    FROM (
        SELECT ROWID, ROW_NUMBER() OVER (PARTITION BY id, title, synopsis, genre, aired, episodes,  score, img_url,link ORDER BY ROWID) AS rnum
        FROM DLK_ANIMES 
        order by ranked, members, popularity desc
    )
    WHERE rnum > 1
);


    
END LIMPA_DADOS_DUPLICADOS ; 
--------------------------------------------------------


PROCEDURE INSERE_DADOS_GEN_PARTICIONADO IS

BEGIN

INSERT INTO TRA_PARTITION_GENRE (ID, genre)
SELECT ID, genre
FROM TABLE(f_particionar_genero()) a
WHERE NOT EXISTS 
( select '' from TRA_PARTITION_GENRE b 
    where a.id = b.id 
    and a.genre = b.genre )
and genre is not null; 

-- INSERT DA TABELA DE DOMINIO DE GENERO, CRIANDO O INSERT DELA A PARTIR DO PARTICIONAMENTO DA FUNCAO

INSERT INTO TD_GENRE
SELECT ROW_NUMBER() OVER (ORDER BY genre) AS num,
       genre  
FROM (
    SELECT DISTINCT genre
    FROM TRA_PARTITION_GENRE a
    WHERE GENRE IS NOT NULL
    AND NOT EXISTS ( SELECT '' FROM TD_GENRE b WHERE a.genre = b.name)
);

END INSERE_DADOS_GEN_PARTICIONADO;
--------------------------------------------------------

PROCEDURE INSERE_TAB_GENERO_ANIME IS

BEGIN
-- INSERT NA TABELA ASSOCIATIVA ENTRE ANIME E GENERO A PARTIR DO PARTICIONAMENTO DA FUNCAO

INSERT INTO GENRE_ANIME
SELECT genero_anime_seq.NEXTVAL,
A.ID ANIME_ID,
B.ID GENRE_ID -- SELECT *
FROM TRA_PARTITION_GENRE A
JOIN TD_GENRE B
ON A.GENRE = B.NAME
WHERE NOT EXISTS ( SELECT '' FROM GENRE_ANIME C WHERE c.anime_id = a.id AND c.genre_id = b.id );

END INSERE_TAB_GENERO_ANIME;
--------------------------------------------------------

PROCEDURE INSERE_TAB_ANIME IS
BEGIN
-- INSERT NA TABELA ANIME COM AS INFORMAÇÕES DA TABELA DLK_ANIME
INSERT INTO ANIME (ID, TITLE, EPISODES, MEMBERS, POPULARITY, RANKED, SCORE )    
SELECT A.ID, TITLE, EPISODES, MEMBERS, POPULARITY, RANKED, SCORE   FROM DLK_ANIMES A 
WHERE NOT EXISTS ( SELECT '' FROM ANIME B WHERE a.id = b.id ) ; 

END INSERE_TAB_ANIME;

--------------------------------------------------------

PROCEDURE UPDATE_TAB_ANIME_AIRED IS
BEGIN
-- UPDATE NA TABELA DE ANIME PARA INSERIR A EXIBIÇÃO PARTICIONADA
MERGE INTO ANIME A
USING (
    SELECT ID, AIRED_START, AIRED_END 
    FROM (
        SELECT B.ID, 
               B.AIRED_START, 
               B.AIRED_END, 
               ROW_NUMBER() OVER (PARTITION BY B.ID ORDER BY B.ID) AS RN
        FROM TABLE(f_particionar_exibicao()) B
    ) 
    WHERE RN = 1
) B
ON (A.ID = B.ID)
WHEN MATCHED THEN 
    UPDATE SET 
        A.AIRED_START = B.AIRED_START,
        A.AIRED_END = B.AIRED_END;
        
END UPDATE_TAB_ANIME_AIRED;    


PROCEDURE INSERE_DADOS_ANIMES_FAV_PARTICIONADO IS

BEGIN  

-- INSERT NA TABELA ASSOCIATIVA ENTRE ANIME E PROFILE A PARTIR DO PARTICIONAMENTO DA FUNCAO

INSERT INTO PROFILE_ANIME (ID, anime_id, PROFILE_ID)
SELECT profile_anime_seq.NEXTVAL, favorites_animes, ID 
FROM TABLE(f_particionar_animes_fav()) a
WHERE NOT EXISTS ( SELECT '' FROM PROFILE_ANIME b
                    WHERE a.favorites_animes = b.anime_id 
                    AND a.id = b.profile_id )
AND favorites_animes is not null; 

END INSERE_DADOS_ANIMES_FAV_PARTICIONADO;

PROCEDURE INSERE_TAB_PROFILE IS

BEGIN

INSERT INTO PROFILE (ID, PROFILE, GENDER, BIRTHDAY)
SELECT ID, PROFILE, GENDER, BIRTHDAY FROM DLK_PROFILES a
WHERE NOT EXISTS (SELECT '' FROM PROFILE b WHERE a.id = b.id); 


END INSERE_TAB_PROFILE;

PROCEDURE INSERE_REVIEW_PROFILE IS

BEGIN

INSERT INTO REVIEW_PROFILE   
SELECT distinct ID,  score, id_score
FROM TABLE(f_particionar_review_score()) a
WHERE NOT EXISTS 
( select '' from REVIEW_PROFILE b 
    where a.id = b.id_profile 
    and a.score = b.id_score_name 
    and a.id_score =  b.id_score ) ;

END INSERE_REVIEW_PROFILE;


PROCEDURE INSERE_REVIEW IS

BEGIN

INSERT INTO review 
SELECT DISTINCT id, profile, anime_id, score FROM dlk_reviews a
WHERE NOT EXISTS ( SELECT '' FROM review b WHERE a.id = b.id);
    
END INSERE_REVIEW;        
--------------------------------------------------------

PROCEDURE P_MAIN AS 

BEGIN

LIMPA_DADOS_DUPLICADOS ;
INSERE_DADOS_GEN_PARTICIONADO;
INSERE_TAB_GENERO_ANIME;
INSERE_TAB_ANIME;
UPDATE_TAB_ANIME_AIRED;
INSERE_DADOS_ANIMES_FAV_PARTICIONADO;
INSERE_TAB_PROFILE;
INSERE_REVIEW_PROFILE;
INSERE_REVIEW;
  
END P_MAIN;


END DLK_TRANSFORMACAO_DADOS;
/
